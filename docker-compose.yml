version: '3.8'

services:
  # Frontend (Nginx serving static files) - Renamed to eds-frontend as per user context
  eds-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mr-dj-eds-frontend
    restart: unless-stopped
    depends_on:
      - mr-dj-backend
    networks:
      - web # Use the existing 'web' network
    labels:
      - "traefik.enable=true"
      # Service definition - single service for both routers
      - "traefik.http.services.mrdj-eds-frontend.loadbalancer.server.port=80"
      # Main router - Host rule for mr-dj.sevensa.nl root
      - "traefik.http.routers.mrdj-eds-frontend.rule=Host(`mr-dj.sevensa.nl`)"
      - "traefik.http.routers.mrdj-eds-frontend.service=mrdj-eds-frontend"
      - "traefik.http.routers.mrdj-eds-frontend.entrypoints=websecure"
      - "traefik.http.routers.mrdj-eds-frontend.tls=true"
      - "traefik.http.routers.mrdj-eds-frontend.tls.certresolver=letsencrypt"

  # Backend API (Node.js/Express) - Renamed to mr-dj-backend
  mr-dj-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mr-dj-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://mrdj_user:mrdj_secure_password_2025@mr-dj-postgres:5432/mrdj_db
      JWT_SECRET: mrdj_jwt_secret_key_2025_very_secure
      CORS_ORIGIN: https://mr-dj.sevensa.nl
    depends_on:
      mr-dj-postgres:
        condition: service_healthy
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mrdj-backend.rule=Host(`mr-dj.sevensa.nl`) && PathPrefix(`/api`)"
      - "traefik.http.routers.mrdj-backend.entrypoints=websecure"
      - "traefik.http.routers.mrdj-backend.tls=true"
      - "traefik.http.routers.mrdj-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.mrdj-backend.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.mrdj-backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.mrdj-backend.middlewares=mrdj-backend-stripprefix"

  # PostgreSQL Database - Renamed to mr-dj-postgres
  mr-dj-postgres:
    image: postgres:15-alpine
    container_name: mr-dj-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mrdj_db
      POSTGRES_USER: mrdj_user
      POSTGRES_PASSWORD: mrdj_secure_password_2025
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mrdj_user -d mrdj_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional, voor sessions/caching) - Renamed to mr-dj-redis
  mr-dj-redis:
    image: redis:7-alpine
    container_name: mr-dj-redis
    restart: unless-stopped
    command: redis-server --requirepass mrdj_redis_password_2025
    networks:
      - web
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  web: # External network for Traefik integration
    external: true

volumes:
  postgres_data:
    driver: local

