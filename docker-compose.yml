version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: mr-dj-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=info@mr-dj.nl"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - mr-dj-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.staging.sevensa.nl`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$8EVjn/nj$$GiLUZqcbueTFeD23SuB6x0"  # admin:admin

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mr-dj-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mrdj_db
      POSTGRES_USER: mrdj_user
      POSTGRES_PASSWORD: mrdj_secure_password_2025
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mr-dj-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mrdj_user -d mrdj_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mr-dj-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://mrdj_user:mrdj_secure_password_2025@postgres:5432/mrdj_db
      JWT_SECRET: mrdj_jwt_secret_key_2025_very_secure
      CORS_ORIGIN: https://staging.sevensa.nl
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mr-dj-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`staging.sevensa.nl`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"

  # Frontend (Nginx serving static files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mr-dj-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - mr-dj-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`staging.sevensa.nl`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Redirect HTTP to HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.frontend-http.rule=Host(`staging.sevensa.nl`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      - "traefik.http.routers.frontend-http.middlewares=redirect-to-https"

  # Redis Cache (optional, voor sessions/caching)
  redis:
    image: redis:7-alpine
    container_name: mr-dj-redis
    restart: unless-stopped
    command: redis-server --requirepass mrdj_redis_password_2025
    networks:
      - mr-dj-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  mr-dj-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

